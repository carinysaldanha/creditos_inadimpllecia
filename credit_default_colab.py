# -*- coding: utf-8 -*-
"""credit_default_colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gze0sdK01bNUBX8-2t9q48E9ZF-8XZa2

# Previs√£o de Inadimpl√™ncia de Cr√©dito üìâ
Este notebook realiza an√°lise explorat√≥ria, modelagem e avalia√ß√£o de modelos para prever inadimpl√™ncia.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from sklearn.datasets import make_classification

"""## 1. Carregamento dos Dados"""

import pandas as pd

# Ler CSV e ajustar colunas (mesmo esquema)
with open('/content/drive/MyDrive/UCI_Credit_Card.csv', 'r') as f:
    header = f.readline().strip().replace('"', '')
colunas = header.split(',')

df = pd.read_csv('/content/drive/MyDrive/UCI_Credit_Card.csv', sep=',', header=None, skiprows=1)
df.columns = colunas
df = df.rename(columns={'default.payment.next.month': 'default'})

# Selecionar as colunas que voc√™ quer:
# idade, saldo banc√°rio, hist√≥rico de cr√©dito (ex: PAY_0, PAY_2, PAY_3...), default
colunas_interesse = ['IDADE', 'LIMIT_BAL', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'default']

tabela_principal = df[colunas_interesse]

# Mostrar as primeiras linhas
print("Tabela com idade, saldo, hist√≥rico de cr√©dito e default:")
display(tabela_principal.head(10))

"""PREPARA√áAO DE DADOS

## 4. An√°lise Explorat√≥ria
"""

sns.pairplot(df, hue='default')
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Mapa de Correla√ß√£o")
plt.show()

"""## 5. Pr√©-processamento"""

X = df.drop("default", axis=1)
y = df["default"]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

"""## 6. Modelagem e Avalia√ß√£o dos Modelos"""

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, accuracy_score

log_model = LogisticRegression(C=10, max_iter=500, random_state=42)
log_model.fit(X_train, y_train)

rf_model = RandomForestClassifier(n_estimators=200, random_state=42)
rf_model.fit(X_train, y_train)

def avaliar_modelo(nome, modelo):
    pred = modelo.predict(X_test)
    auc = roc_auc_score(y_test, pred)
    acc = accuracy_score(y_test, pred)

    print(f"\nüìå Modelo: {nome}")
    print(confusion_matrix(y_test, pred))
    print(classification_report(y_test, pred))
    print(f"Acur√°cia: {acc * 100:.2f}%")
    print(f"AUC: {auc * 100:.2f}%")

avaliar_modelo("Regress√£o Log√≠stica", log_model)
avaliar_modelo("Random Forest", rf_model)